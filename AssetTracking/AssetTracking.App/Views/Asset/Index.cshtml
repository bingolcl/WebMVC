@model AssetTracking.App.Models.AssetSearchViewModel

@{
    ViewData["Title"] = "Index";
    Filters filter = new Filters()
    {
        assigned = -1,
        employee = -1,
        type = -1
    };
}


<br />
<h2>Assets</h2>

<div class="row" style="padding-top: 15px;">
    <div class="col-md-4">
        <label>Assignment: </label>
        <select id="uxAssigns" class="form-control">
            <option value="-1">All</option>
            <option value="0">Unassigned</option>
            <option value="1">Assigned</option>
        </select>
    </div>
    <div class="col-md-4">
        <label>Type: </label>
        <select id="uxTypes" asp-items="@Model.Types" class="form-control">
            <option value="-1">All</option>
        </select>
    </div>
    <div class="col-md-4">
        <label>Employee: </label>
        <select id="uxEmployees" class="form-control">
            <option value="-1">All</option>
        </select>
    </div>
</div>


<div id="uxFilteredAssets" style="margin-top: 20px;">
    @*this is the area wehre we will display available properties for the selected type*@
    @await Component.InvokeAsync("FilterAssets", filter)
</div>

<div style="text-align: right;">
    <button class="btn btn-default" onclick="reset()" style="margin-right: 10px;">Reset Filter</button>
    <a class="btn btn-success" asp-action="Create" style="margin-right: 10px;">New Asset</a>
    <a class="btn btn-primary" asp-action="Assign">Assignment</a>
</div>

@section Scripts {
    <script>
        var assign = -1, type = -1, employee = -1;
        function reset() {
            $('#uxAssigns').val(-1).trigger("chosen:updated");
            $('#uxTypes').val(-1).trigger("chosen:updated");
            $('#uxEmployees').val(-1).trigger("chosen:updated");
            populateTable();
        }

        function populateEmployees() {
            var dropDown = $('#uxEmployees');
            $.ajax({
                method: 'GET',
                url: 'https://localhost:44383/api/Employee'
            }).done(function (data, statusText, xhdr) {
                $.each(data,
                    function (index, employee) {
                        var option = new Option(employee.firstName + ' ' + employee.lastName, employee.id);
                        dropDown.append(option);
                    });
            }).fail(function (xhdr, statusText, errorText) {
                dropDown.options[dropDown.length] = new Option("Error", 0);
            });
        }

        function populateTable() {
            assign = $('#uxAssigns').val();
            type = $("#uxTypes").val();
            employee = $('#uxEmployees').val();

            $('#uxEmployees').prop('disabled', false);
            if (assign == 0) {
                employee = -1;
                $('#uxEmployees').prop('disabled', true);
            }

            $.ajax({
                method: 'POST',
                url: '/Asset/GetAssetsByFilters',
                data: {
                    filter: { "assigned": assign, "employee": employee, "type": type }
                }
            }).done(function (result, statusText, xhdr) {
                $("#uxFilteredAssets").html(result);
            }).fail(function (xhdr, statusText, errorText) {
                $("#uxFilteredAssets").html(JSON.stringify(xhdr));
            });
        }
        //user jquery's ajax method to call a view component to display
        $(document).ready(function () {
            populateEmployees();
            $("#uxAssigns,#uxTypes,#uxEmployees").change(function () {
                populateTable();
            });
        });
    </script>
}